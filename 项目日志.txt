//mongoose aggregate 管道聚合
//正则表达式
//Object.keys(obj).forEach(x => st.has(obj[x]) ? delete obj[x] : st.add(obj[x]))
    这种玩意儿
//es6
//this在vue项目的指向 和箭头函数对它的影响
//watch的使用 比如handler和deep这两个参数

3.20
    要确定怎么编写组件，现在是直接在html里生成，下一步要知道怎么以导入组件的方式去执行
    如何在组件中导入数据

    //生成JSON数据
    连接数据库

    后续工作：先学会在本地项目中，导入JSON数据
            //从html里生成组件废弃该问题//不可行，理由如下
                先不带滚动条
            /学会用组件、入口文件等生成/初步学会
                再插入滚动条

    遗留问题：如何设置断点观察代码错误

打包bundle 还是npm run dev
测试插件时，其实不用html文件，直接在终端npm run wpds就可以自动编译
    以后ui好不要在html里引用来测试，结果会和今天一样：Cannot find module #app


    明天的任务：//把list组件放进App.vue测试
                套个滚动条
                替换数据为JSON

                //部署Github


****************************************

3.21

//App.vue为项目主组件，页面入口文件
//搞清楚了，main.js,App.vue和Hello.vue之间的关系，放在了桌面的笔记文件夹下，以供需要时参阅
//vue组件里面的methods：{}，不需要函数形式
//npm view jquery versions//查看有哪些版本的插件

//原app.vue
<template>
    <div>
        <list></list>
    </div>
</template>

<script>
import List from './components/list.vue'

export default {
    name:'app',
    components:{
        List
    }
}
</script>
//

 --inline --progress --config build/webpack.dev.conf.js


*******************************************

 3.21
 //真是艰难的一天，
 //在今天完成了对vue组件的成功调试，并且可以自己调试组件
 //完成了如何加载加载bootstrap，但是其中的代价却很严重，重新构建了一个项目
    该项目中没有打包bundle.js，预想在最后项目完成时在一起打包，现在用webpack-dev-server完全够用
    有一些遗留的依赖，放在了machine-monitor的文件夹里，需要时再使用
//组件连接时也成功导入bootstrap样式，之前不行是因为table样式的bootstrap格式没有写全
    之后可以在html文件里写bs3-写好，再复制粘贴到.vue文件中

//github初次使用
     1、在本地创建一个版本库（即文件夹），通过git init把它变成Git仓库；

     2、把项目复制到这个文件夹里面，再通过git add .把项目添加到仓库；

     3、再通过git commit -m "注释内容"把项目提交到仓库；

     4、在Github上设置好SSH密钥后，新建一个远程仓库，通过git remote add origin https://github.com/guyibang/TEST2.git将本地仓库和远程仓库进行关联；

     5、最后通过git push -u origin master把本地仓库的项目推送到远程仓库（也就是Github）上；（若新建远程仓库的时候自动创建了README文件会报错，解决办法看上面）。

//根目录下的html文件是绝对不能动的，晚上不知道什么时候删了，结果整个项目就崩了。。报错信息是空。。可怕

**********************************

3.22

//讲生命周期的博文不错，挂出链接，收藏了
    https://segmentfault.com/a/1190000008010666?utm_source=tag-newest

//vuex是vue配套的 公共数据管理工具，它可以把一些共享的数据，保存到vuex中，方便整个程序中的任何组件直接获取或者修改我们的公共数据
//学会了如何在组件中引入JSON数据，使用的是vue-rource
    方法是，将数据 都放在后台的/api/server_event这个url下，然后利用vue-resource请求，将数据都导入到组件中
    不要忘记，在main.js中，要加入引入的import和Vue.use

**************************************
3.24

//给list插入了滚动条
    之前想用vue自带的滚动条（vue-scroller和vuescroll）来实现的，但是在引入和设置了之后，浏览器没有响应，所以换了Bootstrap自带的原生的滚动条来实现
之后再list上实现按模板引擎
今天的任务，实现左侧组件选择要观察的node，右侧组件来展示该node的详细信息
搞清楚Bootstrap中提到的row，container，column等 

处理表格：
    删除畸形数据
    把列名不带 ：— 等

//vuex和redux
学习vuex

明天思考一下，四个属性值和双向数据绑定的结合的可行性

*******************

3.25/周一
//今天来实现用select实现双向绑定属性值，进行选择并查看
//已上传github
//更改bootstrap的container的宽度，将一下代码放入CSS文件中
@media (min-width: 1200px) {
    .container{
        max-width: 800px;
    }
}


*********************************
3.26
//教训：vue中定义的变量都需要this.变量名寻找，不然总是报not defined；
//设置echarts时，记得设置长宽高，不然没有定义就无法显示
//想知道有哪些属性，去看API

//研究图形的自动刷新
//初步完成数据的动态刷新，使用的是watch，有点开心。。。不过后续还要完善代码，不能以此为终点

//今天完成了学会如何导入echarts图，并且实现动态绑定，根据双向绑定机制动态刷新数据，并且成功生成水球图
水球图遗漏：
    对数据的过滤器访问
    水球图的初始化
//明天和教授视频

*******************************************************************

4.7
这一段时间经历了好多，而且知道现在有很多事情也都还没有确定下来，比如我是否留级。。I hope not
夏天到了，每天都很热，我希望as always，希望每当到了夏天就会有好运，又会有一分耕耘一分收获
经历了这恶心心的数据的洗礼，真怀念当时的social Vis是多么友善 多么美好，
应该距离得知结果也不远了，加油！最终定会拨云见日的
这段时光终究会被铭记住，丢车、长湿疹、伤膝盖、吵架、碎手机、被浦老师diss。。。
相信始于足下的道理吧，我并不能停下来
开始吧 所有存在数据库的默认值，都被赋None或者0，测试数据time_stamp赋值-1，以便后期删除
别忘记res.json.docs

*********************************
4.8
node请求数据之前都先要开启数据库
上午一直在寻找对mongodb、mongoose和后端之间的联系，一直没有找到相关的方法
然而，下午直接搜了一下项目的相关资料，发现了解决方法，而且网上还不少

vuex、vue-lazyload懒加载

记录一下学习记录
module.exeports是一个神奇的东西，可以是函数，可以是model，可以是schema，何种各样
在封装为一个函数时，函数里面的其他调用必须是在函数体外面就已经被写好的，而不是只在被调用的页面调用即可
每一次nodemon运行时，运行的根节点都是app。js，需要被调用的模块都被捆绑在这个根节点下即可
明天学习从前台向后台取数据（ajax、promise或者vue_resource）和vuex

**********************************
4.10
使用axios来向后台取数据，因为axios不是一个插件，所以要定义
Vue.prototype.axios = axios
开两个终端，来调试前后台数据
正在解决跨域问题
跨域问题已解决：
    1.太玄学：直接写就可以，放在proxyTable里面就不可以
    2.这件事情教会了我们：
        多看官方文档（比如：vue-cli）
        有些时候的配置，需要终止再重启服务才能生效，
以后拿postman用命令“http://localhost:8079+（请求数据的URL）”，来测试数据

明天：R语言完成浦老师和官老师的任务//完成
        github成功上传代码//完成
        用前台拿到的数据写组件//ing。。。
        保存vscode插件配置并重新安装//完成
**************
4.12
又要写今天的项目日志啦~
今天呢，主要实现了 
    将echarts的日历图搞清楚是个啥子
    成功将日历图在vuedecomponents里跑通
    然后拿着前台的数据，设计js算法 来构成echarts所需的数据结构
感觉还是要每个组件单独写一个数据接口
明天继续加油！
争取早上画出日历图，下午开始force-directed-tree的构造
还有别忘了看mongoose的夺标联合查询
*******************
4.14
后期调试
    VS code debugger
    vue-devtools
钩子函数没有定义，大所属情况是在引用时没有写this.function
***********
4.15
遗留问题：
在html中可行的代码在vue组建中就不可以泡桐//完成
先去构造数组ba
记录一下：终于跑通了，。。。。
    组件里，只有原生js和mounted(),没有其他乱七八糟的methods,created等等
    之后画d3的图，尽量
**************
4.16
距离系统完成倒计时还有10天
记录一下，json对象相比于json字符串而言，可以引用内部元素

错误记录：504 (Gateway Timeout)
    解决方法：没有打开后端服务器
以后传git的时候，提交的时候，就不用的着写commit了，在vscode里面写就行

************
4.22任务
设置一个vue的html自动补全，以便以后数据输出在html中方便//
把vue中跑通代码//
调试旭日图//调试了一半，最后接着调
看官老师的论文
画总览图
************
4.22
我设计的旭日图的算法，数据结构是基于d3的d3.csvParse,d3.csvFormat和d3.stratify结构生成的，
然而stratify这种层次结构只能有一个父节点，所以有了sunburst/structure.js的转换功能，使之成为
可以供旭日图使用的多节点数组

************
4.23
我吹爆，终于搞懂了什么是聚合管道，以及$group,$project的用法
在独立的一个数据接口中，输出了以对象为内容的数组，好艰难
以后在学习过程中，如果有机会了，一定不能这样赶进度，对自身的学习是没有好处的
别忘记，调旭日图参数的事情
***************
4.24
目前主流的vue项目，都是用axios来发起请求的，axios是一种ajax方法，用于和后台交互数据
对状态管理的初步设想，是现在组建么内 请求数据，然后axios发请求到后台 拿到数据
放在vuex中，然后两个组件直接从vuex中拿公共数据渲染表格
（初步想法 发送异步请求到vuex 把数据取回之后都暂存vux中）

明天可以做一个色卡，供所有组件使用
***********
4.25
处理鼠标事件时，调用函数传入一个参数param，param有很多的属性，name value seriesName等等
methods里面的方法互相调用也要用this。XXX
**********
4.26
get和post请求都没有搞懂。。。基础还是太差了
像这种赶项目进度是最后一次，以后要干什么，先系统的学习一遍，比如看视频或者整个学习一遍api

get请求可以单独出现，像之前在后台
post请求应该是可以成对出现

在本项目中应该用get请求数据，因为要返回数据

//记录一些参数
req.query,param.name&value,res.body&data
//
get请求到的参数，调试查看的时候是这样访问
http://localhost:8079/result?name=119650
******************
4.27
实现了d3和echarts的动态刷新
d3中注意的是 清理画布元素 重新画
echarts注意的是 不要乱用箭头函数 会改变this的指向
**************
4.30
数据接口是只能返回一个对象，但是可以设置为json对象，这样便少去了一个接口
成功将warningArray传到了vuex中成为了全局对象
********* 
5.6
论文写得我想吐 今晚争取把异常节点画出来

**************
5.8
项目基本已经完成了，系统除了一些交互其他的都搞定的了。
主视图的异常节点已经画完
剩下的就是今晚刚论文的case study了
加油！！！
***********
5.9
对拥有两个多个job的task节点的sunburst数据处理结构出错
*************
7.1
增加了组件布局和配色
下一步：增加组件联动

//7.1 总结
在calendarGraph视图中，没有成功的显示在tree图节点中点击后的热力图状态，原因如下：
1.不知道展示所需要的两个参数time和machineId是否成功的传进了mongoose查询的端口
2.初始数据data0已经构造好了但是没有生效
3.上一个echarts的视图光芒图是监听的store中的状态，而calendar视图是直接在数据端口中返回的值，不知道可行不可行

猜想，对比echarts的光芒图可能是没有监听到端口数据的更新，所以刷新不了